import logging
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Self

from .entry import FileHandler


class LockEntryException(Exception):
    pass


@dataclass
class LockEntry:
    value: str
    datasource: str
    dep_name: str
    straight_name: str

    def into_str(self) -> str:
        return "straight={} depName={} datasource={} value={}".format(
            self.straight_name,
            self.dep_name,
            self.datasource,
            self.value,
        )

    @classmethod
    def from_str(cls, data: str) -> Self:
        logging.debug("LockEntry: from_str: %s", data)
        try:
            g = re.search(
                r"straight=(?P<straight_name>[^ ]+) depName=(?P<dep_name>[^ ]+) "
                r"datasource=(?P<datasource>[^ ]+) value=(?P<value>[^ ]+)",
                data,
            )
            if not g:
                raise Exception("invalid entry")
            dep_name = g.group("dep_name")
            datasource = g.group("datasource")
            value = g.group("value")
            straight_name = g.group("straight_name")
            return cls(value=value, datasource=datasource, dep_name=dep_name, straight_name=straight_name)
        except Exception as e:
            raise LockEntryException(f"failed to read lock entry from {data}") from e


class LockEntries(list[LockEntry]):
    @classmethod
    def from_str(cls, data: str) -> Self:
        return cls([LockEntry.from_str(x) for x in data.split("\n")])

    def into_str(self) -> str:
        return "\n".join(x.into_str() for x in self)


class LockFile(FileHandler[LockEntries]):
    @classmethod
    def new(cls, path: Path) -> Self:
        return cls(generic_type=LockEntries, path=path)


def custom_manager_entry(file_match: list[str]) -> dict[str, Any]:
    """Create renovate custom_managers element."""
    return {
        "customType": "regex",
        "description": "Generated by emacs-straight-renovate",
        "fileMatch": file_match,
        "matchStrings": ["depName=(?<depName>.+) datasource=(?<datasource>[a-z-]+) value=(?<currentValue>.+)"],
    }
