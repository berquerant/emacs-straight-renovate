import argparse
import os
import traceback
from pathlib import Path
from textwrap import dedent

from .gen import Command as GenCommand
from .lock import Command as LockCommand
from .log import setup
from .repo import Root
from .straight import DefaultEntries


def main() -> int:
    """Entrypoint."""
    parser = argparse.ArgumentParser(
        description="Applying Renovate to `straight-default.el` in Emacs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=dedent(
            """\
        First, generate the lock file for renovate.

        python -m emacs-straight-renovate -e /path/to/straight-default.el -d /path/to/straight/repos -r /path/to/lockfile gen

        Then, add following custom manager to renovate.json.

        {
          "customType": "regex",
          "description": "Generated by emacs-straight-renovate",
          "fileMatch": ["LOCKFILE"],
          "matchStrings": ["depName=(?<depName>.+) datasource=(?<datasource>[a-z-]+) value=(?<currentValue>.+)"]
        }

        If Renovate updates lockfile, apply them to straight-default.el.

        python -m emacs-straight-renovate -e /path/to/straight-default.el -d /path/to/straight/repos -r /path/to/lockfile lock

        Requirements:
        - https://github.com/berquerant/rnv 0.2.0
        """,
        ),
    )
    parser.add_argument("--default-el", "-e", action="store", type=Path, help="straight-default.el")
    parser.add_argument("--repodir", "-d", action="store", type=Path, help="straight/repos")
    parser.add_argument(
        "--renovate-lock", "-r", action="store", type=Path, default="renovate.lock", help="lockfile for renovate"
    )
    parser.add_argument("--failfast", "-f", action="store_true", help="exit on the first failure")
    parser.add_argument("--rnv", action="store", default="rnv", help="rnv command")
    parser.add_argument("--debug", action="store_true", help="enable debug log")
    subp = parser.add_subparsers(dest="cmd")

    subp.add_parser("gen", help="generate renovate lock file")
    lockp = subp.add_parser("lock", help="generate straight-default.el")
    lockp.add_argument("--checkout", "-c", action="store_true", help="checkout to the commit")

    args = parser.parse_args()
    setup(args.debug)

    deps = DefaultEntries.new(args.default_el)
    repos = Root(root=args.repodir, rnv_cmd=args.rnv)
    if args.debug:
        os.environ["RUST_LOG"] = "debug"

    try:
        match args.cmd:
            case "gen":
                GenCommand(deps=deps, repos=repos, locks=args.renovate_lock, fail_fast=args.failfast).run()
            case "lock":
                LockCommand(
                    deps=deps, repos=repos, locks=args.renovate_lock, fail_fast=args.failfast, checkout=args.checkout
                ).run()
            case _:
                raise Exception(f"unknown subcommand: {args.cmd}")
    except Exception:
        traceback.print_exc()
        return 1
    return 0


if __name__ == "__main__":
    import sys

    sys.exit(main())
